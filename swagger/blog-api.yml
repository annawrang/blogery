openapi: 3.0.0
info:
  title: Blog Api
  description: Blog Api handles the blogs
  version: 1.0.0

paths:
  /blogs:
    post:
      summary: Create a new blog
      description: Create a new blog
      security:
        - Bearer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blog'
      responses:
        201:
          description: 'Blog created'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Blog'
        401:
          description: 'Unauthorized'
        400:
          description: 'Validation failed, or blog name is already taken'

  /blogs/{blogId}:
    delete:
      summary: Delete a blog
      description: Delete a blog
      security:
        - Bearer: []
      parameters:
        - $ref: '#/components/parameters/BlogID'
      responses:
        204:
          description: 'No content - the blog has been deleted'
        401:
          description: 'Unauthorized'
        403:
          description: 'Forbidden'
        404:
          description: 'The requested resource can not be found'

  /blogs/{blogId}/posts:
    get:
      summary: Get blog posts
      description: Get all blog posts for blog
      parameters:
        - $ref: '#/components/parameters/BlogID'
        - $ref: '#/components/parameters/Size'
        - $ref: '#/components/parameters/Page'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
    post:
      summary: Create a blog post
      description: Create a blog post
      security:
        - Bearer: []
      parameters:
        - $ref: '#/components/parameters/BlogID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        204:
          description: 'No content - the blog has been deleted'
        401:
          description: 'Unauthorized'
        403:
          description: 'Forbidden'
        404:
          description: 'The requested resource can not be found'

  /blogs/{blogId}/posts/{postId}:
    get:
      summary: Get a blog post
      description: Get a blog post
      parameters:
        - $ref: '#/components/parameters/BlogID'
        - $ref: '#/components/parameters/PostID'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        404:
          description: 'The requested resource can not be found'
    put:
      summary: Edit a blog post
      description: Edit a blog post
      security:
        - Bearer: []
      parameters:
        - $ref: '#/components/parameters/BlogID'
        - $ref: '#/components/parameters/PostID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        401:
          description: 'Unauthorized'
        403:
          description: 'Forbidden'
        404:
          description: 'The requested resource can not be found'
    delete:
      summary: Delete a blog post
      description: Delete a blog post
      security:
        - Bearer: []
      parameters:
        - $ref: '#/components/parameters/BlogID'
        - $ref: '#/components/parameters/PostID'
      responses:
        204:
          description: 'No content - the post has been deleted'
        401:
          description: 'Unauthorized'
        403:
          description: 'Forbidden'
        404:
          description: 'The requested resource can not be found'

  /blogs/{blogId}/posts/{postId}/comments:
    post:
      summary: Comment on a post
      description: Comment on a post
      parameters:
        - $ref: '#/components/parameters/BlogID'
        - $ref: '#/components/parameters/PostID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        201:
          description: 'Created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        404:
          description: 'The requested resource can not be found'

  /blogs/{blogId}/posts/{postId}/comments/{commentId}:
    delete:
      summary: Blog owner can delete a comment
      description: Blog owner can delete a comment
      security:
        - Bearer: []
      parameters:
        - $ref: '#/components/parameters/BlogID'
        - $ref: '#/components/parameters/PostID'
        - $ref: '#/components/parameters/CommentID'
      responses:
        204:
          description: 'No content'
        401:
          description: 'Unauthorized'
        403:
          description: 'Forbidden'
        404:
          description: 'The requested resource can not be found'

components:
  schemas:
    Blog:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        blogId:
          type: string
          format: uuid
        description:
          type: string
        profilePictureUrl:
          type: string
        backgroundPictureUrl:
          type: string
        createdAt:
          type: string
          format: date-time
        accountId:
          type: string
    Post:
      type: object
      required:
        - title
      properties:
        title:
          type: string
        text:
          type: string
        createdAt:
          type: string
          format: date-time
        postId:
          type: string
          format: uuid
        urls:
          type: array
          items:
            type: string
    Comment:
      type: object
      required:
        - text
      properties:
        text:
          type: string
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        commentId:
          type: string
          format: uuid

  parameters:
    BlogID:
      name: blogId
      in: path
      description: Blog ID
      required: true
      schema:
        type: string
        format: uuid

    PostID:
      name: postId
      in: path
      description: Post ID
      required: true
      schema:
        type: string
        format: uuid

    CommentID:
      name: commentId
      in: path
      description: Comment ID
      required: true
      schema:
        type: string
        format: uuid

    Size:
      name: size
      in: query
      description: size
      required: false
      schema:
        type: number

    Page:
      name: page
      in: query
      description: page
      required: false
      schema:
        type: number
